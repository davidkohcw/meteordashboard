{"version":3,"sources":["Components/CurrentLeadersTable.js","Components/CurrentHistogram.js","Components/CurrentShowerData.js","Components/HistoricalPriceChart.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CurrentLeadersTable","props","undefined","console","log","id","className","Object","values","map","contributorObj","amount","from","CurrentHistogram","domainPadding","style","data","fill","bins","x","labels","datum","y","getBarLabel","label","dependentAxis","CurrentShowerData","getItemNumber","percent","totalLength","num","Math","floor","NaN","length","toFixed","HistoricalPriceChart","useState","legendaryData","setLegendaryData","ancientData","setAncientData","rareData","setRareData","commonData","setCommonData","useEffect","legendaryPrices","ancientPrices","rarePrices","commonPrices","i","push","getLegendaryPrice","getAncientPrice","getRarePrice","getHistoricalPrices","showerData","stroke","interpolation","orientation","gutter","colorScale","name","App","setData","isLoading","setIsLoading","STARTTIME","Date","getTime","NUMBEROFSHOWERS","TERRAWALLET","CURRENTSHOWER","currentTime","hoursSinceStart","getCurrentShowerIndex","createRequest","accString","offset","REQUESTURL","compare","a","b","request","tryNext","allParsedTxs","axios","get","then","res","next","tempParsedTxs","parseRawTxs","txs","concat","reverse","parseByShower","showerDataArray","tempCurrentShower","timestamp","currentLength","parseInt","j","sort","unparsedtTxs","parsedArray","tempTx","tempTime","parse","tempFromAddress","tx","value","msg","from_address","tempAmount","denom","tempParsedTx","parseFloat","getData","Container","loading","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAoCeA,EAjCa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAE3B,QAAYC,GAATD,EACC,OAAO,KAGXE,QAAQC,IAAIH,GAWZ,OACI,wBAAOI,GAAG,wBAAwBC,UAAU,qCAA5C,UAEI,gCACI,+BACI,8CACA,gDAGR,gCACKC,OAAOC,OAAOP,GAAOQ,KApBH,SAACC,GAC5B,OACI,qBAAIJ,UAAU,YAAd,UACI,6BAAKI,EAAeC,SACpB,6BAAKD,EAAeE,mB,6CCwBrBC,EAnCU,SAAC,GAAe,IAAbZ,EAAY,EAAZA,MAExB,QAAYC,GAATD,EACC,OAAO,KAaX,OACI,eAAC,IAAD,CACAa,cAAe,GADf,UAIA,cAAC,IAAD,CACEC,MAAO,CAAEC,KAAM,CAAEC,KAAM,SACvBD,KAAMf,EACNiB,KAAM,GACNC,EAAE,SACFC,OAAQ,mBAlBd,SAAqBC,GACnB,OAAGA,EAAMC,EAAI,EACJD,EAAMC,EAER,GAcoBC,CAAf,EAAGF,UAEb,cAAC,IAAD,CAAaG,MAAM,iBACnB,cAAC,IAAD,CAAaC,eAAa,EAACD,MAAM,qBCkC1BE,EA/DW,SAAC,GAAe,IAAbzB,EAAY,EAAZA,MAEzB,QAAYC,GAATD,EACC,OAAO,KAGX,SAAS0B,EAAeC,EAASC,GAC7B,IAAIC,EAAMC,KAAKC,MAAMH,EAAYD,EAAQ,KAAO,GAChD,OAAUK,KAAPH,EACQ,KAEJA,EAKX,OAEI,wBAAOxB,UAAU,oCAAjB,UAEI,gCACI,+BACI,sCACA,2CACA,2CACA,6CACA,6DAGR,kCACI,+BACI,2CACA,wCACA,oCACA,sCACA,mCAAML,EAAM,IAAIU,OAAhB,UAEJ,+BACI,yCACA,yCACA,oCACA,oCAAO,KAAqB,IAAbV,EAAMiC,SAAcC,QAAQ,GAA3C,QACA,mCAAMlC,EAAM0B,EAAc,EAAE1B,EAAMiC,SAASvB,OAA3C,UAEJ,+BACI,sCACA,0CACA,oCACA,mCAAM,KAAK,IAAiB,IAAbV,EAAMiC,SAAcC,QAAQ,GAA3C,QACA,mCAAMlC,EAAM0B,EAAc,GAAG1B,EAAMiC,SAASvB,aAEhD,+BACI,wCACA,2CACA,qCACA,oCAAQ,KAAkB,IAAbV,EAAMiC,OAAc,IAAK,KAAKC,QAAQ,GAAnD,SACA,+C,kBCyDLC,EAhHc,SAAC,GAAe,IAAbnC,EAAY,EAAZA,MAE5B,EAA0CoC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAMA,GAJAC,qBAAU,YAWV,SAA6B7C,GAMzB,IALA,IAAI8C,EAAkB,GAClBC,EAAgB,GAChBC,EAAa,GACbC,EAAe,GAEVC,EAAI,EAAGA,EAAIlD,EAAMiC,OAAQiB,IAC9BJ,EAAgBK,KAAK,CAACjC,EAAEgC,EAAE7B,EAAE+B,EAAkBpD,EAAMkD,MACpDH,EAAcI,KAAK,CAACjC,EAAEgC,EAAE7B,EAAEgC,EAAgBrD,EAAMkD,MAChDF,EAAWG,KAAK,CAACjC,EAAEgC,EAAE7B,EAAEiC,EAAatD,EAAMkD,MAC1CD,EAAaE,KAAK,CAACjC,EAAEgC,EAAE7B,EAAE,IAI7BiB,EAAiBQ,GACjBN,EAAeO,GACfL,EAAYM,GACZJ,EAAcK,GA3BdM,CAAoBvD,KACpB,CAACA,SAEOC,GAATD,EACC,OAAO,KA0BX,SAASoD,EAAkBI,GACvB,OAAGA,EAAWvB,QAAU,GACbuB,EAAW,IAAI9C,OAEnB8C,EAAWA,EAAWvB,QAAQvB,OAGzC,SAAS2C,EAAgBG,GACrB,OAAGA,EAAWvB,QAAU,GAEbuB,EADO1B,KAAKC,MAAwB,IAAlByB,EAAWvB,OAAc,KACzBvB,OAEtB8C,EAAWA,EAAWvB,QAAQvB,OAGzC,SAAS4C,EAAaE,GAClB,OAAGA,EAAWvB,QAAU,GAEbuB,EADO1B,KAAKC,MAAwB,IAAlByB,EAAWvB,OAAc,KACzBvB,OAEtB8C,EAAWA,EAAWvB,QAAQvB,OAGzC,OAEI,gCACI,mEACA,eAAC,IAAD,CACQG,cAAe,GADvB,UAIQ,cAAC,IAAD,CACIC,MAAO,CACHC,KAAM,CACN0C,OAAQ,YAEZ1C,KAAMsB,EAAeqB,cAAc,YACvC,cAAC,IAAD,CACI5C,MAAO,CACHC,KAAM,CACN0C,OAAQ,SAEZ1C,KAAMwB,EAAamB,cAAc,YACrC,cAAC,IAAD,CACI5C,MAAO,CACHC,KAAM,CACN0C,OAAQ,WAEZ1C,KAAM0B,EAAUiB,cAAc,YAClC,cAAC,IAAD,CACI5C,MAAO,CACHC,KAAM,CACN0C,OAAQ,UAEZ1C,KAAM4B,EAAYe,cAAc,YAEpC,cAAC,IAAD,CAAexC,EAAG,GAAIG,EAAG,GACrBsC,YAAY,aACZC,OAAQ,GAERC,WAAY,CAAE,UAAW,OAAQ,SAAS,SAC1C9C,KAAM,CACF,CAAE+C,KAAM,aAAe,CAAEA,KAAM,WAAa,CAAEA,KAAM,QAAS,CAACA,KAAK,aAG3E,cAAC,IAAD,CAAavC,MAAM,kBACnB,cAAC,IAAD,CAAaC,eAAa,W,kBCgG/BuC,MA/Lf,WAEE,MAAwB3B,mBAAS,IAAjC,mBAAOrB,EAAP,KAAaiD,EAAb,KACA,EAAkC5B,oBAAS,GAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KAIIC,EAAY,IAAIC,KAAK,KAAK,GAAG,EAAE,GAAGC,UAChCC,EAAkB,GAClBC,EAAc,+CACdC,EAaN,WACE,IAAMC,GAAc,IAAIL,MAAOC,UACzBK,EAAkB5C,KAAKC,OAAO0C,EAAcN,GAAf,MACnC,GAAGO,EAAgBJ,EACjB,OAAOA,EAET,OAAOI,EAnBaC,GAsBtB,SAASC,EAAcC,EAAiBC,GACtC,IAAIC,EAAa,uCAMjB,OALAA,GAAe,WAAWF,EACtBC,IACFC,GAAc,WAAWD,GAE3BC,GAAc,aAIhB,SAASC,EAASC,EAAOC,GACvB,OAAKD,EAAEvE,OAASwE,EAAExE,OACT,EAEJuE,EAAEvE,OAASwE,EAAExE,QACR,EAEH,EAjDI,4CAoDb,gCAAAuE,EAAA,sDACME,EAAUP,EAAcL,GACxBa,GAAU,EACVC,EAAe,GAHrB,WAKQD,EALR,gCAOUE,IAAMC,IAAIJ,GAASK,MACvB,SAAAC,GAEE,IAAIC,EAAOD,EAAI1E,KAAK2E,KAGdC,EAAgBC,EAFDH,EAAI1E,KAAK8E,KAI9BR,EAAgBA,EAAaS,OAAOH,GAEpCR,EAAUP,EAAcL,EAAYmB,GACjCC,EAAc1D,OAAS,MACxBmD,GAAU,MAnBpB,6BAyBEC,EAAaU,UACb/B,EAAQgC,EAAcX,IACtBnB,GAAa,GA3Bf,6CApDa,sBAmFb,SAAS8B,EAAcjF,GAGrB,IADA,IAAIkF,EAAkB,GACb/C,EAAI,EAAGA,EAAIoB,EAAiBpB,IACnC+C,EAAgB9C,KAAK,IAIvB,IAASD,EAAI,EAAGA,EAAInC,EAAKkB,OAAQiB,IAAI,CACnC,IAAMgD,EAAoBpE,KAAKC,OAAOhB,EAAKmC,GAAGiD,UAAYhC,GAArB,MAErC,GAAG+B,EAAkB5B,EAEnB,GAAgD,GAA7C2B,EAAgBC,GAAmBjE,OACpCgE,EAAgBC,GAAmB/C,KAAKpC,EAAKmC,SAK7C,IADA,IAAMkD,EAAgBC,SAASJ,EAAgBC,GAAmBjE,QACzDqE,EAAI,EAAGA,EAAIF,EAAgBE,IAAI,CAEtC,GAAGL,EAAgBC,GAAmBI,GAAG3F,MAAQI,EAAKmC,GAAGvC,KAGrD,CACFsF,EAAgBC,GAAmB/C,KAAKpC,EAAKmC,IAC7C,MAJA+C,EAAgBC,GAAmBI,GAAG5F,QAAUK,EAAKmC,GAAGxC,QAepER,QAAQC,IAAI,YACV,IAAS+C,EAAI,EAAGA,EAAIoB,EAAiBpB,IACnC+C,EAAgB/C,GAAGqD,KAAKvB,GAE5B,OAAOiB,EAWP,SAASL,EAAYY,GAInB,IAFA,IAAIC,EAAc,GAETvD,EAAI,EAAGA,EAAIsD,EAAavE,OAAQiB,IAAI,CAE3C,IAAMwD,EAASF,EAAatD,GACtByD,EAAWvC,KAAKwC,MAAMF,EAAOP,WAC7BU,EAAkBH,EAAOI,GAAGC,MAAMC,IAAI,GAAGD,MAAME,aAC/CC,EAAaR,EAAOI,GAAGC,MAAMC,IAAI,GAAGD,MAAMrG,OAAO,GAEvD,GAAwB,QAApBwG,EAAWC,OAAmBR,EAAWxC,EAAU,CACrD,IAAMiD,EAAe,CACnB,UAAYT,EACZ,KAAOE,EACP,OAAUQ,YAAYA,WAAWH,EAAWxG,QAAtB,SAA+B,IAAK,IAAIwB,QAAQ,KAExEuE,EAAYtD,KAAKiE,IAGrB,OAAOX,EAGT,OA9IAvG,QAAQC,IAAI,eAAegE,GAC3BjE,QAAQC,IAAIqE,GAEZ3B,qBAAU,YAnBG,mCAoBXyE,KACA,IA0IA,sBAAKjH,UAAU,MAAf,UACI,eAACkH,EAAA,EAAD,WACA,yDAGA,qBAAInH,GAAG,cAAP,6BACqBoE,EAAgB,EADrC,MAC2CF,QAnC5CL,EACM,uDAAyB,yEAE3B,GAqCJ,cAAC,IAAD,CAAauD,QAASvD,EAAWwD,KAAM,MAEtC,eAACF,EAAA,EAAD,CAAWnH,GAAG,gBAAd,UACE,cAAC,EAAD,CAAqBJ,MAASe,EAAKyD,KACnC,eAAC+C,EAAA,EAAD,WACE,8BACE,cAAC,EAAD,CAAkBvH,MAASe,EAAKyD,OAElC,cAAC,EAAD,CAAmBxE,MAASe,EAAKyD,WAIrC,cAAC+C,EAAA,EAAD,UACE,cAAC,EAAD,CAAsBvH,MAASe,MAEjC,0BCxLO2G,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.51c6f52a.chunk.js","sourcesContent":["import React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react'\nconst CurrentLeadersTable = ({ props }) => {\n\n    if(props == undefined){\n        return null\n    }\n\n    console.log(props)\n    const renderLeveragedPoolRow = (contributorObj) => {\n        return(\n            <tr className=\"Table-Row\">\n                <td>{contributorObj.amount}</td>\n                <td>{contributorObj.from}</td>\n            </tr>\n        )\n    }\n\n\n    return ( \n        <table id=\"Current-Leaders-Table\" className=\"ui small selectable inverted table\">\n\n            <thead>\n                <tr>\n                    <th>Contribution</th>\n                    <th>Wallet ID</th>\n                </tr>\n            </thead>\n            <tbody>\n                {Object.values(props).map(renderLeveragedPoolRow)}\n            </tbody>\n        </table>\n    );\n}\n \nexport default CurrentLeadersTable;","import React from 'react';\nimport {VictoryAxis, VictoryChart, VictoryHistogram} from 'victory'\n\nconst CurrentHistogram = ({ props }) => {\n\n    if(props == undefined){\n        return null\n    }\n\n    // console.log(props)\n    \n    function getBarLabel(datum){\n      if(datum.y > 0){\n        return datum.y\n      }\n      return ''\n\n    }\n\n    return (\n        <VictoryChart\n        domainPadding={20}\n      >\n\n        <VictoryHistogram\n          style={{ data: { fill: \"cyan\" } }}\n          data={props}\n          bins={20}\n          x=\"amount\"\n          labels={({ datum }) => getBarLabel(datum)}\n        />\n        <VictoryAxis label=\"Contribution\"/>\n        <VictoryAxis dependentAxis label=\"Wallet Count\"/>\n\n      </VictoryChart>\n    );\n}\n \nexport default CurrentHistogram;","import React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react'\nconst CurrentShowerData = ({ props }) => {\n\n    if(props == undefined){\n        return null\n    }\n\n    function getItemNumber( percent, totalLength ){\n        var num = Math.floor(totalLength*percent/100) + 10 \n        if(num == NaN){\n            return null\n        }\n        return num\n    }\n\n\n\n    return ( \n        \n        <table className=\"ui tiny selectable inverted table\">\n\n            <thead>\n                <tr>\n                    <th>Tier</th>\n                    <th>Breakdown</th>\n                    <th>Available</th>\n                    <th>Odds of Egg</th>\n                    <th>Min Contribution (UST)</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr >\n                    <td>Legendary</td>\n                    <td>Top 10</td>\n                    <td>10</td>\n                    <td>100%</td>\n                    <td> {props[10].amount} </td>\n                </tr>\n                <tr >\n                    <td>Ancient</td>\n                    <td>Next 9%</td>\n                    <td>30</td>\n                    <td> {(100*30/(props.length*0.09)).toFixed(2)}% </td>\n                    <td> {props[getItemNumber(9,props.length)].amount} </td>\n                </tr>\n                <tr >\n                    <td>Rare</td>\n                    <td>Next 22%</td>\n                    <td>60</td>\n                    <td> {100*(60/(props.length*0.22)).toFixed(2)}% </td>\n                    <td> {props[getItemNumber(31,props.length)].amount }</td>\n                </tr>\n                <tr >\n                    <td>Common</td>\n                    <td>Remainder</td>\n                    <td>101</td>\n                    <td> {((101/(props.length*0.69 - 10))*100).toFixed(2)}%  </td>\n                    <td> 8 </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n \nexport default CurrentShowerData;","import React,{useState, useEffect} from 'react';\n\nimport {VictoryAxis, VictoryChart, VictoryLegend, VictoryLine} from 'victory'\n\nconst HistoricalPriceChart = ({ props }) => {\n\n    const [legendaryData, setLegendaryData] = useState([]);\n    const [ancientData, setAncientData] = useState([]);\n    const [rareData, setRareData] = useState([]);\n    const [commonData, setCommonData] = useState([]);\n\n    useEffect(()=>{\n        getHistoricalPrices(props);\n      },[props]);\n\n    if(props == undefined){\n        return null\n    }\n\n    // getHistoricalPrices(props)\n    // console.log(props)\n    // const legendaryData = getHistoricalPrices(props)\n    function getHistoricalPrices(props){\n        var legendaryPrices = []\n        var ancientPrices = []\n        var rarePrices = []\n        var commonPrices = []\n\n        for (var i = 0; i < props.length; i++){\n            legendaryPrices.push({x:i,y:getLegendaryPrice(props[i])})\n            ancientPrices.push({x:i,y:getAncientPrice(props[i])})\n            rarePrices.push({x:i,y:getRarePrice(props[i])})\n            commonPrices.push({x:i,y:8})\n        }\n\n        // console.log(legendaryPrices)\n        setLegendaryData(legendaryPrices)\n        setAncientData(ancientPrices)\n        setRareData(rarePrices)\n        setCommonData(commonPrices)\n    }\n    \n    function getLegendaryPrice(showerData){\n        if(showerData.length >= 10){\n            return showerData[10].amount\n        }\n        return showerData[showerData.length].amount\n    }\n\n    function getAncientPrice(showerData){\n        if(showerData.length >= 10){\n            const index = Math.floor(showerData.length*0.09 + 10)\n            return showerData[index].amount\n        }\n        return showerData[showerData.length].amount\n    }\n\n    function getRarePrice(showerData){\n        if(showerData.length >= 10){\n            const index = Math.floor(showerData.length*0.31 + 10)\n            return showerData[index].amount\n        }\n        return showerData[showerData.length].amount\n    }\n\n    return (\n\n        <div>\n            <h2>Historical Tier Entry Price (UST)</h2>\n            <VictoryChart\n                    domainPadding={20}\n                >\n\n                    <VictoryLine \n                        style={{\n                            data: {\n                            stroke: \"#c43a31\",\n                        }}}\n                        data={legendaryData} interpolation=\"natural\"/>\n                    <VictoryLine\n                        style={{\n                            data: {\n                            stroke: \"blue\",\n                        }}}\n                        data={ancientData} interpolation=\"natural\"/>\n                    <VictoryLine\n                        style={{\n                            data: {\n                            stroke: \"orange\",\n                        }}}\n                        data={rareData} interpolation=\"natural\"/>\n                    <VictoryLine\n                        style={{\n                            data: {\n                            stroke: \"green\",\n                        }}}\n                        data={commonData} interpolation=\"natural\"/>\n\n                    <VictoryLegend x={50} y={10}\n                        orientation=\"horizontal\"\n                        gutter={20}\n                        // style={{ border: { stroke: \"black\" } }}\n                        colorScale={[ \"#c43a31\", \"blue\", \"orange\",\"green\" ]}\n                        data={[\n                            { name: \"Legendary\" }, { name: \"Ancient\" }, { name: \"Rare\" },{name:\"Common\"}\n                        ]}\n                        />\n                    <VictoryAxis label=\"Meteor Shower\"/>\n                    <VictoryAxis dependentAxis/> \n\n                </VictoryChart>\n        </div>\n        \n    );\n}\n \nexport default HistoricalPriceChart;","import React,{useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport CurrentLeadersTable from './Components/CurrentLeadersTable';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react';\nimport CurrentHistogram from './Components/CurrentHistogram';\nimport CurrentShowerData from './Components/CurrentShowerData';\nimport HistoricalPriceChart from './Components/HistoricalPriceChart';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { stringify } from 'querystring';\n\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // const [numRequests, setNumRequests] = useState(0);\n\n\n  let STARTTIME = new Date(2021,10,1,5).getTime()\n  const NUMBEROFSHOWERS = 10;\n  const TERRAWALLET = \"terra193xyvyk5c6f46k87x9nq7gcg305dk37nzm7vdt\"\n  const CURRENTSHOWER = getCurrentShowerIndex()\n\n  // let STARTTIME = new Date(2021,10,1,12).getTime()\n  // const NUMBEROFSHOWERS = 5;\n  // const TERRAWALLET = \"terra193xyvyk5c6f46k87x9nq7gcg305dk37nzm7vdt\"\n  // const REQUESTURL = \"https://bombay-fcd.terra.dev/v1/txs?account=terra193xyvyk5c6f46k87x9nq7gcg305dk37nzm7vdt&limit=100\"\n  console.log(\"Start time: \",STARTTIME)\n  console.log(CURRENTSHOWER)\n\n  useEffect(()=>{\n    getData();\n  },[]);\n\n  function getCurrentShowerIndex(){\n    const currentTime = new Date().getTime()\n    const hoursSinceStart = Math.floor((currentTime - STARTTIME)/(60*60*100))\n    if(hoursSinceStart>NUMBEROFSHOWERS){\n      return NUMBEROFSHOWERS-1\n    }\n    return hoursSinceStart\n  }\n\n  function createRequest(accString:string,offset?:string){\n    var REQUESTURL = \"https://bombay-fcd.terra.dev/v1/txs?\"\n    REQUESTURL +=  \"account=\"+accString\n    if (offset){\n      REQUESTURL += \"&offset=\"+offset\n    }\n    REQUESTURL += \"&limit=100\"\n    return REQUESTURL\n  }\n\n  function compare( a:any, b:any ) {\n    if ( a.amount < b.amount ){\n      return 1;\n    }\n    if ( a.amount > b.amount ){\n      return -1;\n    }\n    return 0;\n  }\n\n  async function getData(){\n    var request = createRequest(TERRAWALLET)\n    var tryNext = true;\n    var allParsedTxs = [] as any;\n\n    while(tryNext){\n      // setNumRequests(numRequests + 1);\n      await axios.get(request).then(\n        res => {\n          // console.log(res)\n          var next = res.data.next;\n          const unparsedtTxs = res.data.txs;\n          // console.log(unparsedtTxs)\n          const tempParsedTxs = parseRawTxs(unparsedtTxs)\n          // console.log(tempParsedTxs)\n          allParsedTxs =  allParsedTxs.concat(tempParsedTxs)\n          // console.log(allParsedTxs)\n          request = createRequest(TERRAWALLET,next)\n          if(tempParsedTxs.length < 100){\n            tryNext = false\n          }\n        }\n      )\n    } \n    // console.log(allParsedTxs)\n    allParsedTxs.reverse();\n    setData(parseByShower(allParsedTxs));\n    setIsLoading(false)\n    // console.log(parseByShower(allParsedTxs));\n  }\n\n  function parseByShower(data:any){\n    // Get Parsed Data by Shower, \n    var showerDataArray = [] as any;\n    for (var i = 0; i < NUMBEROFSHOWERS; i++){\n      showerDataArray.push([])\n    }\n    // console.log(showerDataArray)\n\n    for (var i = 0; i < data.length; i++){\n      const tempCurrentShower = Math.floor((data[i].timestamp - STARTTIME)/(60*60*1000))\n      // console.log(tempCurrentShower)\n      if(tempCurrentShower<NUMBEROFSHOWERS){\n\n        if(showerDataArray[tempCurrentShower].length == 0 ){\n          showerDataArray[tempCurrentShower].push(data[i])\n        }\n        else{\n          // Check for duplicate wallets in same shower and combine if so\n          const currentLength = parseInt(showerDataArray[tempCurrentShower].length)\n          for (var j = 0; j < currentLength ; j++){\n  \n            if(showerDataArray[tempCurrentShower][j].from == data[i].from){\n              showerDataArray[tempCurrentShower][j].amount += data[i].amount\n            } \n            else{\n              showerDataArray[tempCurrentShower].push(data[i])\n              break\n            }\n\n          }\n        }\n        \n      }  \n\n      \n    }\n\n  console.log(\"Sorting!\")\n    for (var i = 0; i < NUMBEROFSHOWERS; i++){\n      showerDataArray[i].sort(compare)\n    }  \n  return showerDataArray\n\n  }\n\n\n  function getIsLoading(){\n    if(isLoading){\n      return <h2> Querying BlockChain <h3> (Can take a few minutes to process)</h3></h2>\n    }\n    return \"\"\n  }\n  function parseRawTxs(unparsedtTxs:any){\n\n    var parsedArray = [] as any;\n\n    for (var i = 0; i < unparsedtTxs.length; i++){\n    \n      const tempTx = unparsedtTxs[i];\n      const tempTime = Date.parse(tempTx.timestamp);\n      const tempFromAddress = tempTx.tx.value.msg[0].value.from_address;\n      const tempAmount = tempTx.tx.value.msg[0].value.amount[0];\n      \n      if (tempAmount.denom == 'uusd' && tempTime > STARTTIME){\n        const tempParsedTx = {\n          \"timestamp\":tempTime,\n          \"from\":tempFromAddress,\n          \"amount\": parseFloat((parseFloat(tempAmount.amount)*(10**-6)).toFixed(2))\n        }\n        parsedArray.push(tempParsedTx)\n      }\n    }\n    return parsedArray\n  }\n\n  return (\n    <div className=\"App\">\n        <Container>\n        <h1>\n          Meteor Shower Dashboard            \n        </h1>\n        <h2 id=\"Sub-Heading\">\n            Current Shower: {CURRENTSHOWER + 1} / {NUMBEROFSHOWERS}\n        </h2>\n        </Container>\n       \n       {getIsLoading()}\n       <ClipLoader  loading={isLoading} size={150} />\n\n        <Container id=\"Top-Dashboard\">\n          <CurrentLeadersTable props = {data[CURRENTSHOWER]}/>\n          <Container>\n            <div>\n              <CurrentHistogram props = {data[CURRENTSHOWER]}/>\n            </div>\n            <CurrentShowerData props = {data[CURRENTSHOWER]}/>\n          </Container>\n        </Container>\n\n        <Container>\n          <HistoricalPriceChart props = {data}/>\n        </Container>\n        <p>\n        </p>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}